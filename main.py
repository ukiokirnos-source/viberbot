import os
import io
import uuid
import asyncio
import datetime
import ssl
import certifi
from flask import Flask, request, Response
import aiohttp

from viberbot import Api
from viberbot.api.bot_configuration import BotConfiguration
from viberbot.api.messages.text_message import TextMessage
from viberbot.api.messages.picture_message import PictureMessage
from viberbot.api.messages.rich_media_message import RichMediaMessage
from viberbot.api.viber_requests import ViberMessageRequest, ViberConversationStartedRequest

from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseUpload, HttpRequest

# ---- ENV for requests/openssl to use certifi bundle (reduces cert issues) ----
os.environ['SSL_CERT_FILE'] = certifi.where()

# ==== –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ====
VIBER_TOKEN = "4fdbb2493ae7ddc2-cd8869c327e2c592-60fd2dddaa295531"
GDRIVE_FOLDER_ID = "1FteobWxkEUxPq1kBhUiP70a4-X0slbWe"
SPREADSHEET_ID = "1W_fiI8FiwDn0sKq0ks7rGcWhXB0HEcHxar1uK4GL1P8"
GOOGLE_TOKEN_FILE = "token.json"
SCOPES = [
    'https://www.googleapis.com/auth/drive.file',
    'https://www.googleapis.com/auth/spreadsheets'
]
DAILY_LIMIT_DEFAULT = 8
ADMIN_ID = "uJBIST3PYaJLoflfY/9zkQ=="

app = Flask(__name__)

# ==== –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Viber –±–æ—Ç–∞ ====
viber = Api(BotConfiguration(
    name='–î–∂–µ–∫—Å–æ–Ωü§ñ',
    avatar='https://raw.githubusercontent.com/ukiokirnos-source/viberbot/bea72a7878267cc513cdd87669f9eb6ee0faca50/free-icon-bot-4712106.png',
    auth_token=VIBER_TOKEN
))

# ==== SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è aiohttp (—ñ –¥–ª—è googleapiclient, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ) ====
ssl_context = ssl.create_default_context(cafile=certifi.where())
ssl_context.options |= ssl.OP_NO_TLSv1 | ssl.OP_NO_TLSv1_1

# ==== –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Google API (–∑–≤–∏—á–Ω–∏–π —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –∫–ª—ñ—î–Ω—Ç) ====
creds = Credentials.from_authorized_user_file(GOOGLE_TOKEN_FILE, SCOPES)
# –ù–µ –≤—Å—ñ –≤–µ—Ä—Å—ñ—ó googleapiclient –ø—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å ssl –≤ HttpRequest; –∑–∞–ª–∏—à–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ,
# –∞–ª–µ –≤—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ SSL_CERT_FILE –≤–∏—â–µ, —â–æ–± OpenSSL –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤ certifi.
drive_service = build('drive', 'v3', credentials=creds)
sheets_service = build('sheets', 'v4', credentials=creds)

# ---- –ì–ª–æ–±–∞–ª–∏ ----
processed_message_tokens = set()
pending_reports = {}             # file_name -> public_url
pending_lock = asyncio.Lock()    # lock –¥–ª—è pending_reports (–∞—Å–∏–Ω—Ö—Ä. –±–µ–∑–ø–µ–∫–∞)

# ==== –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó (—ó—Ö –≤–∏–∫–ª–∏–∫–∞—î–º–æ –≤ executor) ====
def get_all_users_sync():
    result = sheets_service.spreadsheets().values().get(
        spreadsheetId=SPREADSHEET_ID,
        range="–õ–∏—Å—Ç1!A:D"
    ).execute()
    return result.get('values', [])

def find_user_row_sync(user_id):
    rows = get_all_users_sync()
    for idx, row in enumerate(rows):
        if len(row) > 0 and row[0] == user_id:
            return idx + 1, row
    return None, None

def add_new_user_sync(user_id, name):
    sheets_service.spreadsheets().values().append(
        spreadsheetId=SPREADSHEET_ID,
        range="–õ–∏—Å—Ç1!A:D",
        valueInputOption="RAW",
        insertDataOption="INSERT_ROWS",
        body={"values": [[user_id, name, DAILY_LIMIT_DEFAULT, 0]]}
    ).execute()

def update_user_counter_sync(row_number, new_count):
    sheets_service.spreadsheets().values().update(
        spreadsheetId=SPREADSHEET_ID,
        range=f"–õ–∏—Å—Ç1!D{row_number}",
        valueInputOption="RAW",
        body={"values": [[new_count]]}
    ).execute()

def add_public_permission_sync(file_id):
    try:
        permission = {'type': 'anyone', 'role': 'reader'}
        drive_service.permissions().create(fileId=file_id, body=permission).execute()
    except Exception as e:
        print(f"[drive permission] –ü–æ–º–∏–ª–∫–∞: {e}")

def find_sheet_name_sync(sheet_id, file_base_name):
    try:
        spreadsheet = sheets_service.spreadsheets().get(spreadsheetId=sheet_id).execute()
        sheets = spreadsheet.get('sheets', [])
        for sheet in sheets:
            title = sheet.get('properties', {}).get('title', '')
            if title == file_base_name:
                return title
        return None
    except Exception as e:
        print(f"[find_sheet_name] –ü–æ–º–∏–ª–∫–∞: {e}")
        return None

def get_barcodes_from_sheet_sync(sheet_id, sheet_name):
    try:
        result = sheets_service.spreadsheets().values().get(
            spreadsheetId=sheet_id,
            range=f"{sheet_name}!A:A"
        ).execute()
        values = result.get('values', [])
        if not values or (len(values) == 1 and values[0][0] == "[NO_BARCODE]"):
            return None
        return "\n".join(row[0] for row in values if row)
    except Exception as e:
        return f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—ñ —à—Ç—Ä–∏—Ö–∫–æ–¥—ñ–≤: {str(e)}"

# ==== –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏ (–≤–∏–∫–ª–∏–∫–∞—é—Ç—å—Å—è —É —Ñ–æ–Ω—ñ) ====
async def wait_and_send_barcodes_async(user_id, file_base_name, file_name, public_url, timeout=180, interval=2):
    """–ß–µ–∫–∞—î–º–æ –ø–æ—è–≤–∏ –ª–∏—Å—Ç–∞ file_base_name –≤ Google Sheets. –Ø–∫—â–æ –∑'—è–≤–∏–≤—Å—è ‚Äî –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —à—Ç—Ä–∏—Ö–∫–æ–¥–∏.
       timeout ‚Äî —Å–µ–∫., interval ‚Äî –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è (—Å–µ–∫.)."""
    start = asyncio.get_event_loop().time()
    sheet_name = None
    while asyncio.get_event_loop().time() - start < timeout:
        try:
            sheet_name = await asyncio.to_thread(find_sheet_name_sync, SPREADSHEET_ID, file_base_name)
            if sheet_name:
                break
        except Exception as e:
            # –õ–æ–≥—É—î–º–æ —ñ –ø—Ä–æ–±—É—î–º–æ –∑–Ω–æ–≤—É; –Ω–µ –ø–∞–¥–∞—î–º–æ
            print(f"[wait_and_send_barcodes] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –ª–∏—Å—Ç–∞: {e}")
        await asyncio.sleep(interval)

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ñ–æ—Ç–æ (–Ω–µ –±–ª–æ–∫—É—î–º–æ loop)
    try:
        await asyncio.to_thread(viber.send_messages, user_id, [
            PictureMessage(media=public_url, text=f"–§–æ—Ç–æ: {file_name}")
        ])
    except Exception as e:
        print(f"[viber send photo] –ü–æ–º–∏–ª–∫–∞: {e}")

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–°–∫–∞—Ä–≥–∞" ‚Äî —ñ –¥–æ–¥–∞—î–º–æ –≤ pending_reports –ø—ñ–¥ lock
    rich_media_dict = {
        "Type": "rich_media",
        "ButtonsGroupColumns": 6,
        "ButtonsGroupRows": 1,
        "BgColor": "#FFFFFF",
        "Buttons": [
            {
                "Columns": 6,
                "Rows": 1,
                "ActionType": "reply",
                "ActionBody": f"report_{file_name}",
                "Text": "‚ö†Ô∏è –°–∫–∞—Ä–≥–∞",
                "TextSize": "medium",
                "TextVAlign": "middle",
                "TextHAlign": "center",
                "BgColor": "#ff6666",
                "TextOpacity": 100,
                "TextColor": "#FFFFFF"
            }
        ]
    }
    try:
        async with pending_lock:
            pending_reports[file_name] = public_url
        await asyncio.to_thread(viber.send_messages, user_id, [
            RichMediaMessage(rich_media=rich_media_dict, min_api_version=2, alt_text="–°–∫–∞—Ä–≥–∞")
        ])
    except Exception as e:
        print(f"[viber send button] –ü–æ–º–∏–ª–∫–∞: {e}")

    # –û—Ç—Ä–∏–º—É—î–º–æ —à—Ç—Ä–∏—Ö–∫–æ–¥–∏ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤ executor) —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ
    if not sheet_name:
        barcodes_text = f"‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ª–∏—Å—Ç–∞ –∑ –Ω–∞–∑–≤–æ—é '{file_base_name}' –ø—ñ—Å–ª—è {timeout} —Å–µ–∫."
    else:
        barcodes = await asyncio.to_thread(get_barcodes_from_sheet_sync, SPREADSHEET_ID, sheet_name)
        barcodes_text = barcodes or f"‚ùå –®—Ç—Ä–∏—Ö–∫–æ–¥—ñ–≤ —É —Ñ–æ—Ç–æ '{file_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

    try:
        await asyncio.to_thread(viber.send_messages, user_id, [TextMessage(text=barcodes_text)])
    except Exception as e:
        print(f"[viber send barcodes] –ü–æ–º–∏–ª–∫–∞: {e}")

async def handle_report_async(user_id, user_name, file_name):
    async with pending_lock:
        if file_name in pending_reports:
            photo_url = pending_reports.pop(file_name)
        else:
            photo_url = None

    if photo_url:
        try:
            await asyncio.to_thread(viber.send_messages, ADMIN_ID, [
                TextMessage(text=f"‚ö†Ô∏è –°–∫–∞—Ä–≥–∞ –≤—ñ–¥ {user_name} ({user_id})"),
                PictureMessage(media=photo_url, text="–§–æ—Ç–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
            ])
            await asyncio.to_thread(viber.send_messages, user_id, [TextMessage(text="–°–∫–∞—Ä–≥–∞ —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –∞–¥–º—ñ–Ω—É ‚úÖ")])
        except Exception as e:
            print(f"[handle_report] –ü–æ–º–∏–ª–∫–∞: {e}")
    else:
        # –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚Äî –º–æ–∂–Ω–∞ –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        try:
            await asyncio.to_thread(viber.send_messages, user_id, [TextMessage(text="‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –∑–Ω–∞–π—Ç–∏ —Ñ–æ—Ç–æ –¥–ª—è —Å–∫–∞—Ä–≥–∏.")])
        except Exception:
            pass

async def handle_photo_async(user_id, user_name, image_url, row_num, uploaded_today):
    # –£–Ω—ñ–∫–∞–ª—å–Ω–µ —ñ–º'—è (uuid + timestamp) —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –∫–æ–ª—ñ–∑—ñ–π
    ext = image_url.split('.')[-1].split('?')[0]
    if ext.lower() not in ['jpg', 'jpeg', 'png']:
        ext = 'jpg'
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    unique = uuid.uuid4().hex[:8]
    file_base_name = f"photo_{timestamp}_{unique}"
    file_name = f"{file_base_name}.{ext}"

    try:
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–∫–∞—á–∞—Ç–∏ —Ñ–æ—Ç–æ (aiohttp –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î certifi —á–µ—Ä–µ–∑ SSL_CERT_FILE env)
        timeout = aiohttp.ClientTimeout(total=30)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get(image_url, ssl=ssl_context) as resp:
                if resp.status != 200:
                    raise RuntimeError(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: —Å—Ç–∞—Ç—É—Å {resp.status}")
                img_data = await resp.read()

        file_stream = io.BytesIO(img_data)
        media = MediaIoBaseUpload(file_stream, mimetype=f'image/{ext}')
        file_metadata = {'name': file_name, 'parents': [GDRIVE_FOLDER_ID]}

        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤ Google Drive ‚Äî —Ä–æ–±–∏–º–æ –≤ thread, –±–æ googleapiclient —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π
        file = await asyncio.to_thread(lambda: drive_service.files().create(
            body=file_metadata, media_body=media, fields='id'
        ).execute())
        file_id = file.get('id')

        # –î–æ–∑–≤—ñ–ª ‚Äî —Ç–µ–∂ –≤ thread
        await asyncio.to_thread(add_public_permission_sync, file_id)

        # –û–Ω–æ–≤–ª—é—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ —é–∑–µ—Ä–∞
        await asyncio.to_thread(update_user_counter_sync, row_num, uploaded_today + 1)

        # –í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        await asyncio.to_thread(viber.send_messages, user_id, [TextMessage(text=f"üì• –§–æ—Ç–æ '{file_name}' –æ—Ç—Ä–∏–º–∞–Ω–æ. –ß–µ–∫–∞—é –ª–∏—Å—Ç–∞...")])

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ —á–µ–∫–∞–Ω–Ω—è –ª–∏—Å—Ç–∞ —É —Ñ–æ–Ω—ñ
        asyncio.get_event_loop().create_task(
            wait_and_send_barcodes_async(user_id, file_base_name, file_name, f"https://drive.google.com/uc?id={file_id}")
        )
    except Exception as e:
        print(f"[handle_photo] –ü–æ–º–∏–ª–∫–∞: {e}")
        try:
            await asyncio.to_thread(viber.send_messages, user_id, [TextMessage(text=f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ: {e}")])
        except Exception:
            pass

async def process_viber_request_async(viber_request):
    # –û–±—Ä–æ–±–ª—é—î–º–æ —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –ø–æ–¥—ñ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    if isinstance(viber_request, ViberConversationStartedRequest):
        await asyncio.to_thread(viber.send_messages, viber_request.user.id, [
            TextMessage(text="–ü—Ä–∏–≤—ñ—Ç! –í—ñ–¥–ø—Ä–∞–≤ –º–µ–Ω—ñ –Ω–∞–∫–ª–∞–¥–Ω—É –∑—ñ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞–º–∏.\n–©–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —Å–≤—ñ–π ID, –Ω–∞–ø–∏—à–∏: –ê–π–¥—ñ")
        ])
        return

    message_token = getattr(viber_request, 'message_token', None)
    if message_token in processed_message_tokens:
        return
    processed_message_tokens.add(message_token)

    if isinstance(viber_request, ViberMessageRequest):
        message = viber_request.message
        user_id = viber_request.sender.id
        user_name = viber_request.sender.name
        text = getattr(message, 'text', '')
        if text:
            text = text.strip().lower()

        # –û–±—Ä–æ–±–∫–∞ —Å–∫–∞—Ä–≥–∏
        if isinstance(text, str) and text.startswith("report_"):
            file_name = text[len("report_"):]
            asyncio.get_event_loop().create_task(handle_report_async(user_id, user_name, file_name))
            return

        # –ê–π–¥—ñ
        if text == "–∞–π–¥—ñ":
            await asyncio.to_thread(viber.send_messages, user_id, [TextMessage(text=f"–í–∞—à user_id: {user_id}")])
            return

        # –ë–µ—Ä–µ–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ —é–∑–µ—Ä–∞ (–≤–∏–∫–ª–∏–∫–∏ google sheets ‚Äî —É thread)
        row = await asyncio.to_thread(find_user_row_sync, user_id)
        row_num, row_data = row if row else (None, None)
        if not row_num:
            await asyncio.to_thread(add_new_user_sync, user_id, user_name)
            row_num, row_data = await asyncio.to_thread(find_user_row_sync, user_id)

        # –ó–∞—Ö–∏—â–∞—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø–æ–ª—ñ–≤ —É —Ä—è–¥–∫—É
        try:
            limit = int(row_data[2]) if row_data and len(row_data) > 2 else DAILY_LIMIT_DEFAULT
            uploaded_today = int(row_data[3]) if row_data and len(row_data) > 3 else 0
        except Exception:
            limit = DAILY_LIMIT_DEFAULT
            uploaded_today = 0

        if uploaded_today >= limit:
            await asyncio.to_thread(viber.send_messages, user_id, [TextMessage(text=f"üö´ –í–∏ –¥–æ—Å—è–≥–ª–∏ –ª—ñ–º—ñ—Ç—É {limit} —Ñ–æ—Ç–æ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ.")])
            return

        # –Ø–∫—â–æ —Ñ–æ—Ç–æ ‚Äî –∑–∞–ø—É—Å–∫–∞—î–º–æ handle_photo_async —É —Ñ–æ–Ω—ñ
        if hasattr(message, 'media') and message.media:
            image_url = message.media
            asyncio.get_event_loop().create_task(handle_photo_async(user_id, user_name, image_url, row_num, uploaded_today))

# ==== –û—Å–Ω–æ–≤–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç: –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ 200 —ñ –∑–∞–ø—É—Å–∫–∞—î–º–æ –æ–±—Ä–æ–±–∫—É –≤ background ====
@app.route('/', methods=['POST'])
def incoming():
    try:
        raw = request.get_data()
        viber_request = viber.parse_request(raw)
    except Exception as e:
        # –ù–µ–≥–∞—Ä–∞–∑–¥ –∑ –ø–∞—Ä—Å–∏–Ω–≥–æ–º ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ 400
        print(f"[incoming parse] –ü–æ–º–∏–ª–∫–∞: {e}")
        return Response(status=400)

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ñ–æ–Ω–æ–≤—É –æ–±—Ä–æ–±–∫—É ‚Äî –ù–ï —á–µ–∫–∞—î–º–æ —ó—ó
    try:
        loop = asyncio.get_event_loop()
    except RuntimeError:
        # –Ø–∫—â–æ loop –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π ‚Äî –∑–∞–ø—É—Å–∫–∞—î–º–æ –π–æ–≥–æ –≤ –æ–∫—Ä–µ–º–æ–º—É —Ç—Ä–µ–¥—ñ (–∑–≤–∏—á–∞–π–Ω–æ –ø—Ä–∏ dev —Ü–µ –Ω–µ –±—É–¥–µ)
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

    loop.create_task(process_viber_request_async(viber_request))
    return Response(status=200)

@app.route('/', methods=['GET'])
def ping():
    return "OK", 200

if __name__ == '__main__':
    # –î–ª—è dev: –¥–æ–∑–≤–æ–ª—è—î–º–æ nested loop –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—É—Å–∫—É
    import nest_asyncio
    nest_asyncio.apply()
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask. –£ production ‚Äì –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π Gunicorn/uvicorn/fastapi.
    app.run(host='0.0.0.0', port=5000, threaded=True)
