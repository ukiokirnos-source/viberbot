import logging
import json
import datetime
from flask import Flask, request, Response
from viberbot import Api
from viberbot.api.bot_configuration import BotConfiguration
from viberbot.api.messages import TextMessage, PictureMessage
from viberbot.api.viber_requests import ViberMessageRequest, ViberConversationStartedRequest, ViberSubscribedRequest, ViberUnsubscribedRequest
from googleapiclient.discovery import build
from google.oauth2.service_account import Credentials

# ------------------ –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ------------------
VIBER_TOKEN = "4fdbb2493ae7ddc2-cd8869c327e2c592-60fd2dddaa295531"
GDRIVE_FOLDER_ID = "1FteobWxkEUxPq1kBhUiP70a4-X0slbWe"
SPREADSHEET_ID = "1W_fiI8FiwDn0sKq0ks7rGcWhXB0HEcHxar1uK4GL1P8"
GOOGLE_TOKEN_FILE = "token.json"
SCOPES = ['https://www.googleapis.com/auth/drive.file', 'https://www.googleapis.com/auth/spreadsheets']
DAILY_LIMIT_DEFAULT = 8
ADMIN_ID = "uJBIST3PYaJLoflfY/9zkQ=="

app = Flask(__name__)
viber = Api(BotConfiguration(
    name='BarcodeBot',
    avatar='',
    auth_token=VIBER_TOKEN
))

# ------------------ –õ–û–ì–Ü–ù–ì ------------------
logging.basicConfig(level=logging.INFO)

# ------------------ –ü–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø GOOGLE ------------------
creds = Credentials.from_service_account_file(GOOGLE_TOKEN_FILE, scopes=SCOPES)
service_sheets = build('sheets', 'v4', credentials=creds)
sheet = service_sheets.spreadsheets()

# ------------------ –°–¢–ê–ù ------------------
user_limits = {}            # {user_id: limit}
last_barcode_messages = {}  # {user_id: [{"file_name": str, "time": datetime}]}

# ------------------ –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á ------------------
def get_limit(user_id):
    return user_limits.get(user_id, DAILY_LIMIT_DEFAULT)

def set_limit(user_id, new_limit):
    user_limits[user_id] = new_limit

def save_barcode_info(user_id, file_name):
    if user_id not in last_barcode_messages:
        last_barcode_messages[user_id] = []
    last_barcode_messages[user_id].append({
        "file_name": file_name,
        "time": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    })
    # –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 5, —â–æ–± –Ω–µ —Ä–æ–∑–¥—É–≤–∞—Ç–∏ –ø–∞–º'—è—Ç—å
    last_barcode_messages[user_id] = last_barcode_messages[user_id][-5:]

def send_barcode_message(user_id, file_name, codes_text):
    # –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ —Ç—ñ–ª—å–∫–∏ –¥–ª—è —Ü—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    keyboard = {
        "Type": "keyboard",
        "DefaultHeight": False,
        "Buttons": [
            {
                "Columns": 6,
                "Rows": 1,
                "BgColor": "#FF0000",
                "ActionType": "reply",
                "ActionBody": f"error_report|{file_name}",
                "Text": "<font color='#FFFFFF'>‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞</font>"
            }
        ]
    }
    viber.send_messages(user_id, [
        TextMessage(text=codes_text, keyboard=keyboard)
    ])
    save_barcode_info(user_id, file_name)

def report_error_to_admin(user_id, file_name):
    text = f"‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –ø–æ–≤—ñ–¥–æ–º–∏–≤ –ø—Ä–æ –ø–æ–º–∏–ª–∫—É\n–§–æ—Ç–æ: {file_name}"
    viber.send_messages(ADMIN_ID, [TextMessage(text=text)])

# ------------------ –û–ë–†–û–ë–ö–ê –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨ ------------------
@app.route('/', methods=['POST'])
def incoming():
    viber_request = viber.parse_request(request.get_data())
    logging.info("Received request: %s", viber_request)

    # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞
    if isinstance(viber_request, ViberConversationStartedRequest):
        viber.send_messages(viber_request.user.id, [
            TextMessage(text="–ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—Å–∏–ª–∞–π —Ñ–æ—Ç–æ —à—Ç—Ä–∏—Ö–∫–æ–¥—ñ–≤.")
        ])
        return Response(status=200)

    # –ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    elif isinstance(viber_request, ViberMessageRequest):
        user_id = viber_request.sender.id
        message = viber_request.message

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∞
        if isinstance(message, TextMessage) and message.text.startswith("error_report|"):
            file_name = message.text.split("|", 1)[1]
            report_error_to_admin(user_id, file_name)
            viber.send_messages(user_id, [
                TextMessage(text="–î—è–∫—É—î–º–æ, –º–∏ –ø–æ–≤—ñ–¥–æ–º–∏–ª–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ –ø–æ–º–∏–ª–∫—É.")
            ])
            return Response(status=200)

        # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–ø—Ä–∞–≤–∏–≤ —Ç–µ–∫—Å—Ç –∞–¥–º—ñ–Ω—É: –∑–º—ñ–Ω–∞ –ª—ñ–º—ñ—Ç—É
        if user_id == ADMIN_ID and isinstance(message, TextMessage) and message.text.startswith("set_limit"):
            try:
                _, target_id, new_limit = message.text.split()
                new_limit = int(new_limit)
                set_limit(target_id, new_limit)
                viber.send_messages(ADMIN_ID, [TextMessage(text=f"–õ—ñ–º—ñ—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {target_id} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {new_limit}")])
            except Exception as e:
                viber.send_messages(ADMIN_ID, [TextMessage(text=f"–ü–æ–º–∏–ª–∫–∞: {e}")])
            return Response(status=200)

        # –Ø–∫—â–æ –ø—Ä–∏–π—à–ª–æ —Ñ–æ—Ç–æ
        if isinstance(message, PictureMessage):
            file_name = f"photo_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg"
            # –¢—É—Ç –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —à—Ç—Ä–∏—Ö–∫–æ–¥—ñ–≤
            fake_codes = ["123456789012", "987654321098"]  # —Ç–µ—Å—Ç–æ–≤—ñ –∫–æ–¥–∏
            codes_text = f"üì∏ –§–æ—Ç–æ: {file_name}\nüîç –®—Ç—Ä–∏—Ö–∫–æ–¥–∏:\n" + "\n".join(fake_codes)
            send_barcode_message(user_id, file_name, codes_text)
            return Response(status=200)

        # –Ü–Ω–∞–∫—à–µ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
        if isinstance(message, TextMessage):
            viber.send_messages(user_id, [TextMessage(text="–ù–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –∑—ñ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞–º–∏.")])
            return Response(status=200)

    return Response(status=200)


if __name__ == "__main__":
    app.run(host='0.0.0.0', port=8080, debug=True)
