import io
import threading
import time
import requests
import datetime
from flask import Flask, request, Response
from viberbot import Api
from viberbot.api.bot_configuration import BotConfiguration
from viberbot.api.messages.text_message import TextMessage
from viberbot.api.messages.keyboard_message import KeyboardMessage, Keyboard, Button
from viberbot.api.viber_requests import ViberMessageRequest, ViberConversationStartedRequest
from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseUpload

# ==== –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ====
VIBER_TOKEN = "4fdbb2493ae7ddc2-cd8869c327e2c592-60fd2dddaa295531"
GDRIVE_FOLDER_ID = "1FteobWxkEUxPq1kBhUiP70a4-X0slbWe"
SPREADSHEET_ID = "1W_fiI8FiwDn0sKq0ks7rGcWhXB0HEcHxar1uK4GL1P8"
GOOGLE_TOKEN_FILE = "token.json"
SCOPES = [
    'https://www.googleapis.com/auth/drive.file',
    'https://www.googleapis.com/auth/spreadsheets'
]
DAILY_LIMIT_DEFAULT = 8
ADMIN_ID = "uJBIST3PYaJLoflfY/9zkQ=="

app = Flask(__name__)
viber = Api(BotConfiguration(
    name='–§–æ—Ç–æ–ó–∞–≥—Ä—É–∑Bot',
    avatar='https://example.com/avatar.jpg',
    auth_token=VIBER_TOKEN
))

# ==== Google API ====
creds = Credentials.from_authorized_user_file(GOOGLE_TOKEN_FILE, SCOPES)
drive_service = build('drive', 'v3', credentials=creds)
sheets_service = build('sheets', 'v4', credentials=creds)

processed_message_tokens = set()

# ==== Google Sheets functions ====
def get_all_users():
    result = sheets_service.spreadsheets().values().get(
        spreadsheetId=SPREADSHEET_ID,
        range="–õ–∏—Å—Ç1!A:D"
    ).execute()
    return result.get('values', [])

def find_user_row(user_id):
    rows = get_all_users()
    for idx, row in enumerate(rows):
        if len(row) > 0 and row[0] == user_id:
            return idx + 1, row
    return None, None

def add_new_user(user_id, name):
    sheets_service.spreadsheets().values().append(
        spreadsheetId=SPREADSHEET_ID,
        range="–õ–∏—Å—Ç1!A:D",
        valueInputOption="RAW",
        insertDataOption="INSERT_ROWS",
        body={"values": [[user_id, name, DAILY_LIMIT_DEFAULT, 0]]}
    ).execute()

def update_user_counter(row_number, new_count):
    sheets_service.spreadsheets().values().update(
        spreadsheetId=SPREADSHEET_ID,
        range=f"–õ–∏—Å—Ç1!D{row_number}",
        valueInputOption="RAW",
        body={"values": [[new_count]]}
    ).execute()

# ==== Admin keyboard ====
def send_admin_keyboard(user_id):
    keyboard = {
        "Type": "keyboard",
        "DefaultHeight": True,
        "Buttons": [
            {"Columns": 6, "Rows": 1, "Text": "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤",
             "ActionType": "reply", "ActionBody": "check_users"},
            {"Columns": 6, "Rows": 1, "Text": "–ó–º—ñ–Ω–∏—Ç–∏ –ª—ñ–º—ñ—Ç",
             "ActionType": "reply", "ActionBody": "change_limit"}
        ]
    }
    viber.send_messages(user_id, [KeyboardMessage(keyboard=keyboard)])

# ==== Google Drive ====
def add_public_permission(file_id):
    try:
        permission = {'type': 'anyone', 'role': 'reader'}
        drive_service.permissions().create(fileId=file_id, body=permission).execute()
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥–æ—Å—Ç—É–ø—É: {e}")

# ==== Sheets for barcodes ====
def find_sheet_name(sheet_id, file_base_name):
    try:
        spreadsheet = sheets_service.spreadsheets().get(spreadsheetId=sheet_id).execute()
        sheets = spreadsheet.get('sheets', [])
        for sheet in sheets:
            title = sheet.get('properties', {}).get('title', '')
            if title == file_base_name:
                return title
        return None
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –ª–∏—Å—Ç–∞: {e}")
        return None

def get_barcodes_from_sheet(sheet_id, sheet_name):
    try:
        result = sheets_service.spreadsheets().values().get(
            spreadsheetId=sheet_id,
            range=f"{sheet_name}!A:A"
        ).execute()
        values = result.get('values', [])
        if not values or (len(values) == 1 and values[0][0] == "[NO_BARCODE]"):
            return None
        return "\n".join(row[0] for row in values if row)
    except Exception as e:
        return f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—ñ —à—Ç—Ä–∏—Ö–∫–æ–¥—ñ–≤: {str(e)}"

# ==== Delayed sending ====
def delayed_send(user_id, file_base_name, file_name):
    time.sleep(80)
    sheet_name = find_sheet_name(SPREADSHEET_ID, file_base_name)
    if not sheet_name:
        barcodes_text = f"‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ª–∏—Å—Ç–∞ '{file_base_name}'"
    else:
        barcodes_text = get_barcodes_from_sheet(SPREADSHEET_ID, sheet_name)
        if barcodes_text is None:
            barcodes_text = f"‚ùå –®—Ç—Ä–∏—Ö–∫–æ–¥—ñ–≤ —É —Ñ–æ—Ç–æ '{file_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

    # 1. –§–æ—Ç–æ
    photo_url = f"https://drive.google.com/uc?id={file_name}"  # –∞–±–æ –≤ —Ç–µ–±–µ –º–æ–∂–Ω–∞ –≤—Å—Ç–∞–≤–ª—è—Ç–∏ –ø—Ä—è–º–∏–π URL
    viber.send_messages(user_id, [TextMessage(text=f"üì• –§–æ—Ç–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ: {file_name}")])

    # 2. –®—Ç—Ä–∏—Ö–∫–æ–¥–∏
    viber.send_messages(user_id, [TextMessage(text=f"üîç –®—Ç—Ä–∏—Ö–∫–æ–¥–∏:\n{barcodes_text}")])

    # 3. –ö–Ω–æ–ø–∫–∞ "–ü–æ–º–∏–ª–∫–∞"
    keyboard = Keyboard(
        Buttons=[
            Button(
                ActionType='reply',
                ActionBody=f"report_error|{file_name}",
                Text="–ü–æ–º–∏–ª–∫–∞",
                Columns=2,
                Rows=1
            )
        ]
    )
    viber.send_messages(user_id, [KeyboardMessage(keyboard=keyboard)])

# ==== Main route ====
@app.route('/', methods=['POST'])
def incoming():
    viber_request = viber.parse_request(request.get_data())
    user_id = getattr(viber_request.sender, 'id', None)
    message_token = getattr(viber_request, 'message_token', None)

    if message_token in processed_message_tokens:
        return Response(status=200)
    processed_message_tokens.add(message_token)

    # –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
    row_num, row = find_user_row(user_id)
    if not row_num:
        add_new_user(user_id, getattr(viber_request.sender, 'name', ''))
        row_num, row = find_user_row(user_id)

    # –§–æ—Ç–æ –æ–±—Ä–æ–±–∫–∞
    if isinstance(viber_request, ViberMessageRequest) and hasattr(viber_request.message, 'media') and viber_request.message.media:
        image_url = viber_request.message.media
        ext = image_url.split('.')[-1].split('?')[0]
        ext = ext if ext.lower() in ['jpg', 'jpeg', 'png'] else 'jpg'
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        file_base_name = f"photo_{timestamp}"
        file_name = f"{file_base_name}.{ext}"

        try:
            img_data = requests.get(image_url).content
            file_stream = io.BytesIO(img_data)
            media = MediaIoBaseUpload(file_stream, mimetype=f'image/{ext}')
            file_metadata = {'name': file_name, 'parents': [GDRIVE_FOLDER_ID]}
            file = drive_service.files().create(
                body=file_metadata,
                media_body=media,
                fields='id'
            ).execute()
            file_id = file.get('id')
            add_public_permission(file_id)

            # –õ—ñ—á–∏–ª—å–Ω–∏–∫
            uploaded_today = int(row[3])
            limit = int(row[2])
            if uploaded_today >= limit:
                viber.send_messages(user_id, [TextMessage(text=f"üö´ –î–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç {limit} —Ñ–æ—Ç–æ")])
                return Response(status=200)
            update_user_counter(row_num, uploaded_today + 1)

            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø—ñ—Å–ª—è 80 —Å–µ–∫
            threading.Thread(
                target=delayed_send,
                args=(user_id, file_base_name, file_name),
                daemon=True
            ).start()

            viber.send_messages(user_id, [TextMessage(text=f"üì• –§–æ—Ç–æ '{file_name}' –æ—Ç—Ä–∏–º–∞–Ω–æ. –û–±—Ä–æ–±–∫–∞...")])

        except Exception as e:
            viber.send_messages(user_id, [TextMessage(text=f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–æ—Ç–æ: {str(e)}")])

    # –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–∏–ª–∫–∞"
    if isinstance(viber_request, ViberMessageRequest) and hasattr(viber_request.message, 'text'):
        if viber_request.message.text.startswith("report_error|"):
            reported_file = viber_request.message.text.split("|")[1]
            viber.send_messages(ADMIN_ID, [TextMessage(text=f"‚ö† –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} —Å–∫–∞—Ä–∂–∏—Ç—å—Å—è –Ω–∞ —Ñ–æ—Ç–æ: {reported_file}")])
            viber.send_messages(user_id, [TextMessage(text="‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")])

    return Response(status=200)

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)
