import io
import threading
import time
import requests
import datetime
from flask import Flask, request, Response
from viberbot import Api
from viberbot.api.bot_configuration import BotConfiguration
from viberbot.api.messages.text_message import TextMessage
from viberbot.api.messages.keyboard_message import KeyboardMessage
from viberbot.api.viber_requests import ViberMessageRequest, ViberConversationStartedRequest

from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseUpload

# ==== –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ====
VIBER_TOKEN = "4fdbb2493ae7ddc2-cd8869c327e2c592-60fd2dddaa295531"
GDRIVE_FOLDER_ID = "1FteobWxkEUxPq1kBhUiP70a4-X0slbWe"
SPREADSHEET_ID = "1W_fiI8FiwDn0sKq0ks7rGcWhXB0HEcHxar1uK4GL1P8"
GOOGLE_TOKEN_FILE = "token.json"
SCOPES = ['https://www.googleapis.com/auth/drive.file',
          'https://www.googleapis.com/auth/spreadsheets']

DAILY_LIMIT_DEFAULT = 8
ADMIN_ID = "uJBIST3PYaJLoflfY/9zkQ=="

app = Flask(__name__)

# ==== –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Viber ====
viber = Api(BotConfiguration(
    name='–§–æ—Ç–æ–ó–∞–≥—Ä—É–∑Bot',
    avatar='https://example.com/avatar.jpg',
    auth_token=VIBER_TOKEN
))

# ==== –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Google API ====
creds = Credentials.from_authorized_user_file(GOOGLE_TOKEN_FILE, SCOPES)
drive_service = build('drive', 'v3', credentials=creds)
sheets_service = build('sheets', 'v4', credentials=creds)

processed_message_tokens = set()
admin_state = {}  # –¥–ª—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–º—ñ–Ω–∏ –ª—ñ–º—ñ—Ç—É {user_id: {"step":1/2, "target":id}}

# ==== –¢–∞–±–ª–∏—á–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ ====
def get_all_users():
    result = sheets_service.spreadsheets().values().get(
        spreadsheetId=SPREADSHEET_ID,
        range="–õ–∏—Å—Ç1!A:D"
    ).execute()
    return result.get('values', [])

def find_user_row(user_id):
    rows = get_all_users()
    for idx, row in enumerate(rows):
        if len(row) > 0 and row[0] == user_id:
            return idx + 1, row
    return None, None

def add_new_user(user_id, name):
    sheets_service.spreadsheets().values().append(
        spreadsheetId=SPREADSHEET_ID,
        range="–õ–∏—Å—Ç1!A:D",
        valueInputOption="RAW",
        insertDataOption="INSERT_ROWS",
        body={"values": [[user_id, name, DAILY_LIMIT_DEFAULT, 0]]}
    ).execute()

def update_user_counter(row_number, new_count):
    sheets_service.spreadsheets().values().update(
        spreadsheetId=SPREADSHEET_ID,
        range=f"–õ–∏—Å—Ç1!D{row_number}",
        valueInputOption="RAW",
        body={"values": [[new_count]]}
    ).execute()

def update_user_limit(row_number, new_limit):
    sheets_service.spreadsheets().values().update(
        spreadsheetId=SPREADSHEET_ID,
        range=f"–õ–∏—Å—Ç1!C{row_number}",
        valueInputOption="RAW",
        body={"values": [[new_limit]]}
    ).execute()

# ==== –ê–¥–º—ñ–Ω—Å—å–∫—ñ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ ====
def send_admin_keyboard(user_id):
    keyboard = {
        "Type": "keyboard",
        "DefaultHeight": True,
        "Buttons": [
            {"Columns": 6, "Rows": 1, "Text": "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", "ActionType": "reply", "ActionBody": "check_users"},
            {"Columns": 6, "Rows": 1, "Text": "–ó–º—ñ–Ω–∏—Ç–∏ –ª—ñ–º—ñ—Ç", "ActionType": "reply", "ActionBody": "change_limit"}
        ]
    }
    viber.send_messages(user_id, [KeyboardMessage(keyboard=keyboard)])

# ==== –§–æ—Ç–æ —Ç–∞ —à—Ç—Ä–∏—Ö–∫–æ–¥–∏ ====
def add_public_permission(file_id):
    try:
        permission = {'type': 'anyone', 'role': 'reader'}
        drive_service.permissions().create(fileId=file_id, body=permission).execute()
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥–æ—Å—Ç—É–ø—É: {e}")

def delayed_send_barcodes(user_id, file_base_name, file_name, delay=80):
    time.sleep(delay)
    try:
        result = sheets_service.spreadsheets().values().get(
            spreadsheetId=SPREADSHEET_ID,
            range=f"–õ–∏—Å—Ç1!A:A"
        ).execute()
        values = result.get('values', [])
        if not values:
            text = f"‚ùå –®—Ç—Ä–∏—Ö–∫–æ–¥—ñ–≤ –¥–ª—è —Ñ–æ—Ç–æ '{file_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
        else:
            barcodes = "\n".join(row[0] for row in values if row)
            text = f"üì∏ –§–æ—Ç–æ: {file_name}\nüîç –®—Ç—Ä–∏—Ö–∫–æ–¥–∏:\n{barcodes}"
        viber.send_messages(user_id, [TextMessage(text=text)])
    except Exception as e:
        viber.send_messages(user_id, [TextMessage(text=f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —à—Ç—Ä–∏—Ö–∫–æ–¥—ñ–≤: {e}")])

# ==== –û—Å–Ω–æ–≤–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç ====
@app.route('/', methods=['POST'])
def incoming():
    viber_request = viber.parse_request(request.get_data())
    user_id = getattr(viber_request, 'sender', None) and viber_request.sender.id

    if isinstance(viber_request, ViberConversationStartedRequest):
        viber.send_messages(viber_request.user.id, [
            TextMessage(text="–ü—Ä–∏–≤—ñ—Ç! –í—ñ–¥–ø—Ä–∞–≤ –º–µ–Ω—ñ –Ω–∞–∫–ª–∞–¥–Ω—É –∑—ñ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞–º–∏.")
        ])
        if viber_request.user.id == ADMIN_ID:
            send_admin_keyboard(viber_request.user.id)
        return Response(status=200)

    message_token = getattr(viber_request, 'message_token', None)
    if message_token in processed_message_tokens:
        return Response(status=200)
    processed_message_tokens.add(message_token)

    if isinstance(viber_request, ViberMessageRequest):
        message = viber_request.message
        user_id = viber_request.sender.id
        user_name = viber_request.sender.name
        text = getattr(message, 'text', '').strip().lower()

        # === –ê–¥–º—ñ–Ω—Å—å–∫–∏–π —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤ ===
        if user_id == ADMIN_ID:
            if user_id in admin_state:
                state = admin_state[user_id]
                if state["step"] == 1:
                    state["target"] = text
                    state["step"] = 2
                    viber.send_messages(user_id, [TextMessage(text=f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –ª—ñ–º—ñ—Ç –¥–ª—è {text}:")])
                    return Response(status=200)
                elif state["step"] == 2:
                    target_id = state["target"]
                    new_limit = text
                    row_num, row = find_user_row(target_id)
                    if row_num:
                        update_user_limit(row_num, new_limit)
                        viber.send_messages(user_id, [TextMessage(text=f"‚úÖ –õ—ñ–º—ñ—Ç –∑–º—ñ–Ω–µ–Ω–æ –¥–ª—è {target_id} ‚Üí {new_limit}")])
                    else:
                        viber.send_messages(user_id, [TextMessage(text="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")])
                    admin_state.pop(user_id)
                    return Response(status=200)

            # –∫–Ω–æ–ø–∫–∏
            if text == "change_limit":
                admin_state[user_id] = {"step": 1, "target": None}
                viber.send_messages(user_id, [TextMessage(text="–í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –∑–º—ñ–Ω–∏ –ª—ñ–º—ñ—Ç—É:")])
                return Response(status=200)
            elif text == "check_users":
                users = get_all_users()
                msg = "–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:\n"
                for row in users[1:]:
                    msg += f"{row[0]} | {row[1]} | –õ—ñ–º—ñ—Ç: {row[2]} | –§–æ—Ç–æ: {row[3]}\n"
                viber.send_messages(user_id, [TextMessage(text=msg)])
                return Response(status=200)

        # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫—â–æ –Ω–µ–º–∞
        row_num, row = find_user_row(user_id)
        if not row_num:
            add_new_user(user_id, user_name)
            row_num, row = find_user_row(user_id)

        limit = int(row[2])
        uploaded_today = int(row[3])

        if uploaded_today >= limit:
            viber.send_messages(user_id, [TextMessage(text=f"üö´ –í–∏ –¥–æ—Å—è–≥–ª–∏ –ª—ñ–º—ñ—Ç—É {limit} —Ñ–æ—Ç–æ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ.")])
            return Response(status=200)

        # === –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ ===
        if hasattr(message, 'media') and message.media:
            image_url = message.media
            ext = image_url.split('.')[-1].split('?')[0]
            if ext.lower() not in ['jpg', 'jpeg', 'png']:
                ext = 'jpg'

            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            file_base_name = f"photo_{timestamp}"
            file_name = f"{file_base_name}.{ext}"

            try:
                img_data = requests.get(image_url).content
                file_stream = io.BytesIO(img_data)

                media = MediaIoBaseUpload(file_stream, mimetype=f'image/{ext}')
                file_metadata = {'name': file_name, 'parents': [GDRIVE_FOLDER_ID]}
                file = drive_service.files().create(
                    body=file_metadata,
                    media_body=media,
                    fields='id'
                ).execute()

                file_id = file.get('id')
                add_public_permission(file_id)
                update_user_counter(row_num, uploaded_today + 1)

                viber.send_messages(user_id, [
                    TextMessage(text=f"üì• –§–æ—Ç–æ '{file_name}' –æ—Ç—Ä–∏–º–∞–Ω–æ. –û–±—Ä–æ–±–ª—é—é (2 —Ö–≤)...")
                ])

                threading.Thread(
                    target=delayed_send_barcodes,
                    args=(user_id, file_base_name, file_name),
                    daemon=True
                ).start()

            except Exception as e:
                viber.send_messages(user_id, [TextMessage(text=f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ: {e}")])

    return Response(status=200)

@app.route('/', methods=['GET'])
def ping():
    return "OK", 200

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
