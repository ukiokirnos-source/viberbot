import io
import time
import threading
import requests
import datetime
import traceback
from flask import Flask, request, Response
from viberbot import Api
from viberbot.api.bot_configuration import BotConfiguration
from viberbot.api.messages.text_message import TextMessage
from viberbot.api.messages.picture_message import PictureMessage
from viberbot.api.messages.rich_media_message import RichMediaMessage
from viberbot.api.viber_requests import ViberMessageRequest, ViberConversationStartedRequest
from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseUpload

# ==== –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ====
VIBER_TOKEN = "4fdbb2493ae7ddc2-cd8869c327e2c592-60fd2dddaa295531"
GDRIVE_FOLDER_ID = "1FteobWxkEUxPq1kBhUiP70a4-X0slbWe"
SPREADSHEET_ID = "1W_fiI8FiwDn0sKq0ks7rGcWhXB0HEcHxar1uK4GL1P8"
GOOGLE_TOKEN_FILE = "token.json"
SCOPES = [
    'https://www.googleapis.com/auth/drive.file',
    'https://www.googleapis.com/auth/spreadsheets'
]
ADMIN_ID = "uJBIST3PYaJLoflfY/9zkQ=="
SCRIPT_URL = "https://script.google.com/macros/s/AKfycbw3qol9XKHcuR8Z0r72bqfnr60S0dL1IeNSqqsa49YqYujuH00MYK1qEvqEIP-ALF4bnw/exec"

app = Flask(__name__)

# ==== –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Viber ====
viber = Api(BotConfiguration(
    name='–î–∂–µ–∫—Å–æ–Ωü§ñ',
    avatar='https://raw.githubusercontent.com/ukiokirnos-source/viberbot/bea72a7878267cc513cdd87669f9eb6ee0faca50/free-icon-bot-4712106.png',
    auth_token=VIBER_TOKEN
))

# ==== –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Google ====
creds = Credentials.from_authorized_user_file(GOOGLE_TOKEN_FILE, SCOPES)
drive_service = build('drive', 'v3', credentials=creds)
sheets_service = build('sheets', 'v4', credentials=creds)

# –º–Ω–æ–∂–∏–Ω–∏ –¥–ª—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ
processed_file_ids = set()       # –∑–±–µ—Ä—ñ–≥–∞—î–º–æ Drive file_id, —â–æ–± –Ω–µ –æ–±—Ä–æ–±–ª—è—Ç–∏ –¥—É–±–ª—ñ–∫–∞—Ç–∏
pending_reports = {}             # file_name -> public_url

# ==== Google Drive ====
def add_public_permission(file_id):
    try:
        permission = {'type': 'anyone', 'role': 'reader'}
        drive_service.permissions().create(fileId=file_id, body=permission).execute()
    except Exception as e:
        print(f"[ERROR] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥–æ—Å—Ç—É–ø—É: {e}")
        traceback.print_exc()

# ==== –ê–∫—Ç–∏–≤–∞—Ç–æ—Ä Apps Script (–ª–∏—à–µ —Ç—Ä–∏–≥–µ—Ä) ====
def trigger_apps_script(public_url):
    try:
        print(f"[SCRIPT] –í–∏–∫–ª–∏–∫–∞—é Apps Script –¥–ª—è {public_url}")
        resp = requests.post(SCRIPT_URL, json={"imageUrl": public_url}, timeout=15)
        print(f"[SCRIPT] –°—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {resp.status_code}")
        # –Ω–µ —á–µ–∫–∞—î–º–æ JSON ‚Äî Apps Script —Ç—ñ–ª—å–∫–∏ —Ç—Ä–∏–≥–µ—Ä–∏—Ç—å –æ–±—Ä–æ–±–∫—É
        return resp.status_code == 200 or resp.status_code == 202 or resp.status_code == 204
    except Exception as e:
        print(f"[ERROR] –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–ª–∏–∫–∞—Ç–∏ Apps Script: {e}")
        traceback.print_exc()
        return False

# ==== –ó—á–∏—Ç—É–≤–∞–Ω–Ω—è —à—Ç—Ä–∏—Ö–∫–æ–¥—ñ–≤ —ñ–∑ Google Sheets ====
def get_barcodes_from_sheet_by_file_name(file_name):
    # –æ—á—ñ–∫—É—î–º–æ, —â–æ –∞—Ä–∫—É—à –Ω–∞–∑–≤–∞–Ω–∏–π —è–∫ file_name –±–µ–∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è
    sheet_name = file_name.rsplit('.', 1)[0]
    try:
        print(f"[SHEETS] –ß–∏—Ç–∞—é –∞—Ä–∫—É—à '{sheet_name}'")
        result = sheets_service.spreadsheets().values().get(
            spreadsheetId=SPREADSHEET_ID,
            range=f"'{sheet_name}'!A:A"
        ).execute()
        values = result.get("values", [])
        barcodes = [row[0] for row in values if row and row[0]]
        print(f"[SHEETS] –û—Ç—Ä–∏–º–∞–Ω–æ {len(barcodes)} —Ä—è–¥–∫—ñ–≤")
        return barcodes
    except Exception as e:
        print(f"[ERROR] –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –∞—Ä–∫—É—à–∞ '{sheet_name}': {e}")
        traceback.print_exc()
        return []

# ==== –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ====
def send_results_photo_and_barcodes(user_id, file_name, public_url, barcodes):
    try:
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ñ–æ—Ç–æ + —à—Ç—Ä–∏—Ö–∫–æ–¥–∏ (—à—Ç—Ä–∏—Ö–∫–æ–¥–∏ –±–µ–∑ –∑–∞–π–≤–∏—Ö —Å–ª—ñ–≤)
        texts = []
        if barcodes:
            texts.append("\n".join(barcodes))
        else:
            texts.append("‚ùå –®—Ç—Ä–∏—Ö–∫–æ–¥—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        viber.send_messages(user_id, [
            PictureMessage(media=public_url),
            TextMessage(text=texts[0])
        ])
    except Exception as e:
        print(f"[ERROR] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ñ–æ—Ç–æ/—à—Ç—Ä–∏—Ö–∫–æ–¥—ñ–≤: {e}")
        traceback.print_exc()

    # –ö–Ω–æ–ø–∫–∞ "–°–∫–∞—Ä–≥–∞"
    try:
        rich_media = {
            "Type": "rich_media",
            "ButtonsGroupColumns": 6,
            "ButtonsGroupRows": 1,
            "BgColor": "#FFFFFF",
            "Buttons": [
                {
                    "Columns": 6,
                    "Rows": 1,
                    "ActionType": "reply",
                    "ActionBody": f"report_{file_name}",
                    "Text": "‚ö†Ô∏è –°–∫–∞—Ä–≥–∞",
                    "TextSize": "medium",
                    "TextVAlign": "middle",
                    "TextHAlign": "center",
                    "BgColor": "#ff6666",
                    "TextColor": "#FFFFFF"
                }
            ]
        }
        pending_reports[file_name] = public_url
        viber.send_messages(user_id, [
            RichMediaMessage(rich_media=rich_media, min_api_version=2)
        ])
    except Exception as e:
        print(f"[ERROR] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫–Ω–æ–ø–∫–∏: {e}")
        traceback.print_exc()

# ==== –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø—ñ—Å–ª—è –∞–ø–ª–æ–∞–¥—É ====
def trigger_and_read_then_send(user_id, file_id, file_name, public_url):
    try:
        # –Ø–∫—â–æ file_id –≤–∂–µ –æ–±—Ä–æ–±–ª—è–≤—Å—è ‚Äî –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ
        if file_id in processed_file_ids:
            print(f"[SKIP] file_id {file_id} –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ.")
            return

        # 1) —Ç—Ä–∏–≥–µ—Ä–∏–º–æ Apps Script (—â–æ–± —Å–∫—Ä–∏–ø—Ç —Å—Ç–≤–æ—Ä–∏–≤ –ª–∏—Å—Ç —É —Ç–∞–±–ª–∏—Ü—ñ)
        ok = trigger_apps_script(public_url)
        if not ok:
            print("[WARN] Apps Script –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–≤ —É—Å–ø—ñ—à–Ω–æ –Ω–∞ —Ç—Ä–∏–≥–µ—Ä ‚Äî –≤—Å–µ –æ–¥–Ω–æ —á–µ–∫–∞—Ç–∏–º—É —ñ —Å–ø—Ä–æ–±—É—é –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ —Ç–∞–±–ª–∏—Ü—é.")

        # 2) —á–µ–∫–∞—Ç–∏ –ø–æ–∫–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø–∏—à–µ –ª–∏—Å—Ç ‚Äî –∫—ñ–ª—å–∫–∞ —Å–ø—Ä–æ–±
        attempts = 0
        max_attempts = 4
        wait_between = 5  # —Å–µ–∫—É–Ω–¥
        barcodes = []
        while attempts < max_attempts:
            attempts += 1
            print(f"[WAIT] –°–ø—Ä–æ–±–∞ {attempts}/{max_attempts} ‚Äî —á–µ–∫–∞—é {wait_between} —Å–µ–∫ –ø–µ—Ä–µ–¥ —á–∏—Ç–∞–Ω–Ω—è–º...")
            time.sleep(wait_between)
            barcodes = get_barcodes_from_sheet_by_file_name(file_name)
            if barcodes:
                print(f"[OK] –®—Ç—Ä–∏—Ö–∫–æ–¥–∏ –∑–Ω–∞–π–¥–µ–Ω—ñ –Ω–∞ —Å–ø—Ä–æ–±—ñ {attempts}")
                break
        # 3) –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –ø—É—Å—Ç–æ)
        send_results_photo_and_barcodes(user_id, file_name, public_url, barcodes)

        # 4) –≤—ñ–¥–º—ñ—Ç–∏—Ç–∏ file_id —è–∫ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π (—â–æ–± –Ω–µ —Ä–æ–±–∏—Ç–∏ –¥—É–±–ª—å)
        processed_file_ids.add(file_id)
        print(f"[DONE] –ü–æ–º—ñ—Ç–∫–∞ file_id {file_id} —è–∫ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π.")

    except Exception as e:
        print(f"[ERROR] –ü–æ–º–∏–ª–∫–∞ —É trigger_and_read_then_send: {e}")
        traceback.print_exc()
        try:
            viber.send_messages(user_id, [TextMessage(text=f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ: {e}")])
        except:
            pass

# ==== HTTP –º–∞—Ä—à—Ä—É—Ç –±–æ—Ç–∞ ====
@app.route('/', methods=['POST'])
def incoming():
    try:
        viber_request = viber.parse_request(request.get_data())
    except Exception as e:
        print(f"[ERROR] –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ Viber –∑–∞–ø–∏—Ç: {e}")
        traceback.print_exc()
        return Response(status=500)

    # –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ —Ä–æ–∑–º–æ–≤–∏
    if isinstance(viber_request, ViberConversationStartedRequest):
        viber.send_messages(viber_request.user.id, [
            TextMessage(text="–ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Ñ–æ—Ç–æ –Ω–∞–∫–ª–∞–¥–Ω–æ—ó ‚Äî —è –∑–Ω–∞–π–¥—É —à—Ç—Ä–∏—Ö–∫–æ–¥–∏.")
        ])
        return Response(status=200)

    # –æ–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if isinstance(viber_request, ViberMessageRequest):
        message = viber_request.message
        user_id = viber_request.sender.id
        text = getattr(message, 'text', '').strip().lower()

        # –æ–±—Ä–æ–±–∫–∞ —Å–∫–∞—Ä–≥–∏
        if text.startswith("report_"):
            file_name = text.replace("report_", "")
            if file_name in pending_reports:
                photo_url = pending_reports.pop(file_name)
                viber.send_messages(ADMIN_ID, [
                    TextMessage(text=f"‚ö†Ô∏è –°–∫–∞—Ä–≥–∞ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user_id}"),
                    PictureMessage(media=photo_url)
                ])
                viber.send_messages(user_id, [TextMessage(text="‚úÖ –°–∫–∞—Ä–≥—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—É.")])
            return Response(status=200)

        # –æ–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ
        if hasattr(message, 'media') and message.media:
            image_url = message.media
            ext = image_url.split('.')[-1].split('?')[0]
            if ext.lower() not in ['jpg', 'jpeg', 'png']:
                ext = 'jpg'
            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            file_name = f"photo_{timestamp}.{ext}"

            try:
                # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–æ—Ç–æ –Ω–∞ –¥–∏—Å–∫
                img_data = requests.get(image_url).content
                file_stream = io.BytesIO(img_data)
                media = MediaIoBaseUpload(file_stream, mimetype=f'image/{ext}')
                file_metadata = {'name': file_name, 'parents': [GDRIVE_FOLDER_ID]}
                file = drive_service.files().create(
                    body=file_metadata, media_body=media, fields='id'
                ).execute()

                file_id = file.get('id')
                print(f"[DRIVE] –§–æ—Ç–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {file_id}")

                # —è–∫—â–æ –≤–∂–µ –æ–±—Ä–æ–±–ª—è–ª–∏ —Ü–µ–π file_id ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
                if file_id in processed_file_ids:
                    print(f"[SKIP] file_id {file_id} –≤–∂–µ –æ–±—Ä–æ–±–ª—è–≤—Å—è ‚Äî –ø—Ä–æ–ø—É—Å–∫.")
                    return Response(status=200)

                add_public_permission(file_id)
                public_url = f"https://drive.google.com/uc?id={file_id}"

                # –ü–µ—Ä—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚Äî —Ç—ñ–ª—å–∫–∏ "–§–æ—Ç–æ –æ—Ç—Ä–∏–º–∞–Ω–æ: {file_name}"
                viber.send_messages(user_id, [
                    TextMessage(text=f"–§–æ—Ç–æ –æ—Ç—Ä–∏–º–∞–Ω–æ: {file_name}")
                ])

                # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ñ–æ–Ω–æ–≤–∏–π –ø–æ—Ç—ñ–∫, —è–∫–∏–π –∞–∫—Ç–∏–≤—É—î —Å–∫—Ä–∏–ø—Ç, —á–µ–∫–∞—î —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
                threading.Thread(target=trigger_and_read_then_send, args=(user_id, file_id, file_name, public_url), daemon=True).start()

            except Exception as e:
                print(f"[ERROR] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–æ—Ç–æ: {e}")
                traceback.print_exc()
                viber.send_messages(user_id, [TextMessage(text=f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ: {e}")])

    return Response(status=200)

@app.route('/', methods=['GET'])
def ping():
    return "OK", 200

if __name__ == '__main__':
    print("[START] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É 5000")
    app.run(host='0.0.0.0', port=5000)
