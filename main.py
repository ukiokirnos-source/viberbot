import io
import threading
import time
import requests
import datetime
from flask import Flask, request, Response

from viberbot import Api
from viberbot.api.bot_configuration import BotConfiguration
from viberbot.api.messages.text_message import TextMessage
from viberbot.api.messages.picture_message import PictureMessage
from viberbot.api.messages.rich_media_message import RichMediaMessage
from viberbot.api.viber_requests import ViberMessageRequest, ViberConversationStartedRequest

from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseUpload

# ==== –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ====
VIBER_TOKEN = "4fdbb2493ae7ddc2-cd8869c327e2c592-60fd2dddaa295531"
GDRIVE_FOLDER_ID = "1FteobWxkEUxPq1kBhUiP70a4-X0slbWe"
SPREADSHEET_ID = "1W_fiI8FiwDn0sKq0ks7rGcWhXB0HEcHxar1uK4GL1P8"
GOOGLE_TOKEN_FILE = "token.json"
SCOPES = [
    'https://www.googleapis.com/auth/drive.file',
    'https://www.googleapis.com/auth/spreadsheets'
]
DAILY_LIMIT_DEFAULT = 12
ADMIN_ID = "uJBIST3PYaJLoflfY/9zkQ=="
SCRIPT_URL = "https://script.google.com/macros/s/AKfycbw3qol9XKHcuR8Z0r72bqfnr60S0dL1IeNSqqsa49YqYujuH00MYK1qEvqEIP-ALF4bnw/exec"

app = Flask(__name__)

# ==== –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Viber –±–æ—Ç–∞ ====
viber = Api(BotConfiguration(
    name='–î–∂–µ–∫—Å–æ–Ωü§ñ',
    avatar='https://raw.githubusercontent.com/ukiokirnos-source/viberbot/bea72a7878267cc513cdd87669f9eb6ee0faca50/free-icon-bot-4712106.png',
    auth_token=VIBER_TOKEN
))

# ==== –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Google API ====
creds = Credentials.from_authorized_user_file(GOOGLE_TOKEN_FILE, SCOPES)
drive_service = build('drive', 'v3', credentials=creds)
sheets_service = build('sheets', 'v4', credentials=creds)

processed_message_tokens = set()
pending_reports = {}  # file_name: photo_url

# ==== –¢–∞–±–ª–∏—Ü—è ====
def get_all_users():
    result = sheets_service.spreadsheets().values().get(
        spreadsheetId=SPREADSHEET_ID,
        range="–õ–∏—Å—Ç1!A:D"
    ).execute()
    return result.get('values', [])

def find_user_row(user_id):
    rows = get_all_users()
    for idx, row in enumerate(rows):
        if len(row) > 0 and row[0] == user_id:
            return idx + 1, row
    return None, None

def add_new_user(user_id, name):
    sheets_service.spreadsheets().values().append(
        spreadsheetId=SPREADSHEET_ID,
        range="–õ–∏—Å—Ç1!A:D",
        valueInputOption="RAW",
        insertDataOption="INSERT_ROWS",
        body={"values": [[user_id, name, DAILY_LIMIT_DEFAULT, 0]]}
    ).execute()

def update_user_counter(row_number, new_count):
    sheets_service.spreadsheets().values().update(
        spreadsheetId=SPREADSHEET_ID,
        range=f"–õ–∏—Å—Ç1!D{row_number}",
        valueInputOption="RAW",
        body={"values": [[new_count]]}
    ).execute()

# ==== Google Drive ====
def add_public_permission(file_id):
    try:
        permission = {'type': 'anyone', 'role': 'reader'}
        drive_service.permissions().create(fileId=file_id, body=permission).execute()
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥–æ—Å—Ç—É–ø—É: {e}")

# ==== –®—Ç—Ä–∏—Ö–∫–æ–¥–∏ ====
def find_sheet_name(sheet_id, file_base_name):
    try:
        spreadsheet = sheets_service.spreadsheets().get(spreadsheetId=sheet_id).execute()
        sheets = spreadsheet.get('sheets', [])
        for sheet in sheets:
            title = sheet.get('properties', {}).get('title', '')
            if title == file_base_name:
                return title
        return None
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –ª–∏—Å—Ç–∞: {e}")
        return None

def get_barcodes_from_sheet(sheet_id, sheet_name):
    try:
        result = sheets_service.spreadsheets().values().get(
            spreadsheetId=sheet_id,
            range=f"{sheet_name}!A:A"
        ).execute()
        values = result.get('values', [])
        if not values or (len(values) == 1 and values[0][0] == "[NO_BARCODE]"):
            return None
        return "\n".join(row[0] for row in values if row)
    except Exception as e:
        return f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—ñ —à—Ç—Ä–∏—Ö–∫–æ–¥—ñ–≤: {str(e)}"

# ==== –§—É–Ω–∫—Ü—ñ—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ç–æ ====
def process_photo(user_id, user_name, file_name, file_base_name, file_id, row_num, uploaded_today):
    try:
        # –í–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç–∞
        try:
            requests.post(SCRIPT_URL, json={"imageUrl": image_url})
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–ª–∏–∫—É —Å–∫—Ä–∏–ø—Ç–∞: {e}")

        time.sleep(15)  # –ø–∞—É–∑–∞ 15 —Å–µ–∫

        # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ñ–æ—Ç–æ
        try:
            viber.send_messages(user_id, [
                PictureMessage(media=f"https://drive.google.com/uc?id={file_id}", text=f"–§–æ—Ç–æ: {file_name}")
            ])
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ —Ñ–æ—Ç–æ: {e}")

        # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–°–∫–∞—Ä–≥–∞"
        try:
            rich_media_dict = {
                "Type": "rich_media",
                "ButtonsGroupColumns": 6,
                "ButtonsGroupRows": 1,
                "BgColor": "#FFFFFF",
                "Buttons": [
                    {
                        "Columns": 6,
                        "Rows": 1,
                        "ActionType": "reply",
                        "ActionBody": f"report_{file_name}",
                        "Text": "‚ö†Ô∏è –°–∫–∞—Ä–≥–∞",
                        "TextSize": "medium",
                        "TextVAlign": "middle",
                        "TextHAlign": "center",
                        "BgColor": "#ff6666",
                        "TextOpacity": 100,
                        "TextColor": "#FFFFFF"
                    }
                ]
            }
            pending_reports[file_name] = f"https://drive.google.com/uc?id={file_id}"
            viber.send_messages(user_id, [
                RichMediaMessage(rich_media=rich_media_dict, min_api_version=2, alt_text="–°–∫–∞—Ä–≥–∞")
            ])
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –∫–Ω–æ–ø–∫–∏: {e}")

        # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —à—Ç—Ä–∏—Ö–∫–æ–¥—ñ–≤
        sheet_name = find_sheet_name(SPREADSHEET_ID, file_base_name)
        if not sheet_name:
            barcodes_text = f"‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ª–∏—Å—Ç–∞ –∑ –Ω–∞–∑–≤–æ—é '{file_base_name}'"
        else:
            barcodes = get_barcodes_from_sheet(SPREADSHEET_ID, sheet_name)
            barcodes_text = barcodes or f"‚ùå –®—Ç—Ä–∏—Ö–∫–æ–¥—ñ–≤ —É —Ñ–æ—Ç–æ '{file_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

        try:
            viber.send_messages(user_id, [TextMessage(text=barcodes_text)])
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ —à—Ç—Ä–∏—Ö–∫–æ–¥—ñ–≤: {e}")

    except Exception as e:
        viber.send_messages(user_id, [TextMessage(text=f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ: {e}")])

# ==== –û—Å–Ω–æ–≤–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç ====
@app.route('/', methods=['POST'])
def incoming():
    viber_request = viber.parse_request(request.get_data())

    if isinstance(viber_request, ViberConversationStartedRequest):
        viber.send_messages(viber_request.user.id, [
            TextMessage(text="–ü—Ä–∏–≤—ñ—Ç! –í—ñ–¥–ø—Ä–∞–≤ –º–µ–Ω—ñ –Ω–∞–∫–ª–∞–¥–Ω—É –∑—ñ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞–º–∏.\n–©–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —Å–≤—ñ–π ID, –Ω–∞–ø–∏—à–∏: –ê–π–¥—ñ")
        ])
        return Response(status=200)

    message_token = getattr(viber_request, 'message_token', None)
    if message_token in processed_message_tokens:
        return Response(status=200)
    processed_message_tokens.add(message_token)

    if isinstance(viber_request, ViberMessageRequest):
        message = viber_request.message
        user_id = viber_request.sender.id
        user_name = viber_request.sender.name
        text = getattr(message, 'text', '').strip().lower()

        # –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–∫–∞—Ä–≥–∞"
        if text.startswith("report_"):
            file_name = text[len("report_"):]
            if file_name in pending_reports:
                photo_url = pending_reports.pop(file_name)
                try:
                    viber.send_messages(ADMIN_ID, [
                        TextMessage(text=f"‚ö†Ô∏è –°–∫–∞—Ä–≥–∞ –≤—ñ–¥ {user_name} ({user_id})"),
                        PictureMessage(media=photo_url, text="–§–æ—Ç–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
                    ])
                    viber.send_messages(user_id, [TextMessage(text="–°–∫–∞—Ä–≥–∞ —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –∞–¥–º—ñ–Ω—É ‚úÖ")])
                except Exception as e:
                    print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Å–∫–∞—Ä–≥–∏ –∞–¥–º—ñ–Ω—É: {e}")
            return Response(status=200)

        # –ö–æ–º–∞–Ω–¥–∞ –ê–π–¥—ñ
        if text == "–∞–π–¥—ñ":
            viber.send_messages(user_id, [TextMessage(text=f"–í–∞—à user_id: {user_id}")])
            return Response(status=200)

        # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫—â–æ –Ω–µ–º–∞
        row_num, row = find_user_row(user_id)
        if not row_num:
            add_new_user(user_id, user_name)
            row_num, row = find_user_row(user_id)

        limit = int(row[2])
        uploaded_today = int(row[3])
        if uploaded_today >= limit:
            viber.send_messages(user_id, [TextMessage(text=f"üö´ –í–∏ –¥–æ—Å—è–≥–ª–∏ –ª—ñ–º—ñ—Ç—É {limit} —Ñ–æ—Ç–æ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ.")])
            return Response(status=200)

        # –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ
        if hasattr(message, 'media') and message.media:
            image_url = message.media
            ext = image_url.split('.')[-1].split('?')[0]
            if ext.lower() not in ['jpg', 'jpeg', 'png']:
                ext = 'jpg'
            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            file_base_name = f"photo_{timestamp}"
            file_name = f"{file_base_name}.{ext}"

            try:
                img_data = requests.get(image_url).content
                file_stream = io.BytesIO(img_data)
                media = MediaIoBaseUpload(file_stream, mimetype=f'image/{ext}')
                file_metadata = {'name': file_name, 'parents': [GDRIVE_FOLDER_ID]}
                file = drive_service.files().create(
                    body=file_metadata, media_body=media, fields='id'
                ).execute()
                file_id = file.get('id')
                add_public_permission(file_id)

                update_user_counter(row_num, uploaded_today + 1)

                viber.send_messages(user_id, [
                    TextMessage(text=f"üì• –§–æ—Ç–æ '{file_name}' –æ—Ç—Ä–∏–º–∞–Ω–æ. –û–±—Ä–æ–±–ª—é—é...")
                ])

                # –°—Ç–∞—Ä—Ç –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ç–æ —É –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
                threading.Thread(
                    target=process_photo,
                    args=(user_id, user_name, file_name, file_base_name, file_id, row_num, uploaded_today),
                    daemon=True
                ).start()

            except Exception as e:
                viber.send_messages(user_id, [TextMessage(text=f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ: {e}")])

    return Response(status=200)

@app.route('/', methods=['GET'])
def ping():
    return "OK", 200

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
