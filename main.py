import io
import threading
import time
import requests
import datetime
from flask import Flask, request, Response
from viberbot import Api
from viberbot.api.bot_configuration import BotConfiguration
from viberbot.api.messages.text_message import TextMessage
from viberbot.api.messages.keyboard_message import KeyboardMessage
from viberbot.api.viber_requests import ViberMessageRequest, ViberConversationStartedRequest

from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseUpload

# ==== –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ====
VIBER_TOKEN = "4fdbb2493ae7ddc2-cd8869c327e2c592-60fd2dddaa295531"
GDRIVE_FOLDER_ID = "1FteobWxkEUxPq1kBhUiP70a4-X0slbWe"
SPREADSHEET_ID = "1W_fiI8FiwDn0sKq0ks7rGcWhXB0HEcHxar1uK4GL1P8"
GOOGLE_TOKEN_FILE = "token.json"
SCOPES = ['https://www.googleapis.com/auth/drive.file', 'https://www.googleapis.com/auth/spreadsheets.readonly']

DAILY_LIMIT = 8  # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –ª—ñ–º—ñ—Ç —Ñ–æ—Ç–æ –Ω–∞ –¥–µ–Ω—å

ADMIN_ID = "—Ç–≤—ñ–π_user_id"  # –≤—Å—Ç–∞–≤ —Å–≤—ñ–π Viber user_id, —â–æ–± –±–∞—á–∏—Ç–∏ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å

app = Flask(__name__)

# ==== –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Viber –±–æ—Ç–∞ ====
viber = Api(BotConfiguration(
    name='–§–æ—Ç–æ–ó–∞–≥—Ä—É–∑Bot',
    avatar='https://example.com/avatar.jpg',
    auth_token=VIBER_TOKEN
))

# ==== –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Google API –∫–ª—ñ—î–Ω—Ç—ñ–≤ ====
creds = Credentials.from_authorized_user_file(GOOGLE_TOKEN_FILE, SCOPES)
drive_service = build('drive', 'v3', credentials=creds)
sheets_service = build('sheets', 'v4', credentials=creds)

processed_message_tokens = set()
user_photo_count = {}        # user_id -> –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–æ—Ç–æ —Å—å–æ–≥–æ–¥–Ω—ñ
custom_limits = {}           # user_id -> —ñ–Ω–¥–∏–≤—ñ–∞–ª—å–Ω–∏–π –ª—ñ–º—ñ—Ç

# ==== –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ ====
def user_keyboard():
    return {
        "Type": "keyboard",
        "DefaultHeight": True,
        "Buttons": [
            {"Columns": 6, "Rows": 1, "Text": "üì∑ –í—ñ–¥–ø—Ä–∞–≤ —Ñ–æ—Ç–æ", "ActionType": "reply", "ActionBody": "send_photo"},
            {"Columns": 6, "Rows": 1, "Text": "üÜî –ú—ñ–π ID", "ActionType": "reply", "ActionBody": "my_id"}
        ]
    }

def admin_keyboard():
    return {
        "Type": "keyboard",
        "DefaultHeight": True,
        "Buttons": [
            {"Columns": 6, "Rows": 1, "Text": "üë§ –ü–µ—Ä–µ–≥–ª—è–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", "ActionType": "reply", "ActionBody": "list_users"},
            {"Columns": 6, "Rows": 1, "Text": "‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –ª—ñ–º—ñ—Ç", "ActionType": "reply", "ActionBody": "change_limit"},
            {"Columns": 6, "Rows": 1, "Text": "‚Ü©Ô∏è –ù–∞–∑–∞–¥", "ActionType": "reply", "ActionBody": "back"}
        ]
    }

# ==== –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è Google Drive/Sheets ====
def add_public_permission(file_id):
    try:
        drive_service.permissions().create(fileId=file_id, body={'type': 'anyone', 'role': 'reader'}).execute()
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –¥–æ—Å—Ç—É–ø—É: {e}")

def find_sheet_name(sheet_id, file_base_name):
    try:
        spreadsheet = sheets_service.spreadsheets().get(spreadsheetId=sheet_id).execute()
        sheets = spreadsheet.get('sheets', [])
        for sheet in sheets:
            title = sheet.get('properties', {}).get('title', '')
            if title == file_base_name:
                return title
        return None
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –ª–∏—Å—Ç–∞: {e}")
        return None

def get_barcodes_from_sheet(sheet_id, sheet_name):
    try:
        result = sheets_service.spreadsheets().values().get(
            spreadsheetId=sheet_id,
            range=f"{sheet_name}!A:A"
        ).execute()
        values = result.get('values', [])
        if not values or (len(values) == 1 and values[0][0] == "[NO_BARCODE]"):
            return None
        return "\n".join(row[0] for row in values if row)
    except Exception as e:
        return f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—ñ —à—Ç—Ä–∏—Ö–∫–æ–¥—ñ–≤: {str(e)}"

def delayed_send_barcodes(user_id, file_base_name, file_name, delay=80):
    time.sleep(delay)
    sheet_name = find_sheet_name(SPREADSHEET_ID, file_base_name)
    if not sheet_name:
        text = f"‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ª–∏—Å—Ç–∞ –∑ –Ω–∞–∑–≤–æ—é '{file_base_name}'"
    else:
        barcodes_text = get_barcodes_from_sheet(SPREADSHEET_ID, sheet_name)
        if barcodes_text is None:
            text = f"‚ùå –®—Ç—Ä–∏—Ö–∫–æ–¥—ñ–≤ —É —Ñ–æ—Ç–æ '{file_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
        else:
            text = f"üì∏ –§–æ—Ç–æ: {file_name}\nüîç –®—Ç—Ä–∏—Ö–∫–æ–¥–∏ –∑ –ª–∏—Å—Ç–∞ '{sheet_name}':\n{barcodes_text}"
    try:
        viber.send_messages(user_id, [TextMessage(text=text)])
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ —à—Ç—Ä–∏—Ö–∫–æ–¥—ñ–≤: {e}")

# ==== –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—ñ–≤ ====
@app.route('/', methods=['POST'])
def incoming():
    viber_request = viber.parse_request(request.get_data())

    # –ü—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–ø—É—Å–∫—É
    if isinstance(viber_request, ViberConversationStartedRequest):
        viber.send_messages(viber_request.user.id, [
            KeyboardMessage(keyboard=user_keyboard(), text="–ü—Ä–∏–≤—ñ—Ç! –í—ñ–¥–ø—Ä–∞–≤ –º–µ–Ω—ñ –Ω–∞–∫–ª–∞–¥–Ω—É –∑—ñ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞–º–∏ —É –≥–∞—Ä–Ω—ñ–π —è–∫–æ—Å—Ç—ñ.")
        ])
        return Response(status=200)

    message_token = getattr(viber_request, 'message_token', None)
    if message_token in processed_message_tokens:
        return Response(status=200)
    processed_message_tokens.add(message_token)

    if isinstance(viber_request, ViberMessageRequest):
        message = viber_request.message
        user_id = viber_request.sender.id
        is_admin = str(user_id) == ADMIN_ID

        # --- –ö–æ–º–∞–Ω–¥–∏ ---
        if hasattr(message, 'text'):
            text = message.text.strip()

            if text == "my_id":
                viber.send_messages(user_id, [TextMessage(text=f"–¢–≤—ñ–π ID: {user_id}")])
                return Response(status=200)

            if is_admin:
                if text == "list_users":
                    if not user_photo_count:
                        viber.send_messages(user_id, [TextMessage(text="–ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")])
                    else:
                        msg = "\n".join([f"{uid} - {user_photo_count[uid]} —Ñ–æ—Ç–æ" for uid in user_photo_count])
                        viber.send_messages(user_id, [TextMessage(text=msg)])
                    return Response(status=200)

                if text == "change_limit":
                    viber.send_messages(user_id, [TextMessage(text="–í–≤–µ–¥—ñ—Ç—å user_id —Ç–∞ –Ω–æ–≤–∏–π –ª—ñ–º—ñ—Ç —É —Ñ–æ—Ä–º–∞—Ç—ñ: user_id:limit")])
                    return Response(status=200)

                if ":" in text:
                    try:
                        uid, new_limit = text.split(":")
                        custom_limits[uid.strip()] = int(new_limit.strip())
                        viber.send_messages(user_id, [TextMessage(text=f"–õ—ñ–º—ñ—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {uid} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {new_limit}")])
                    except:
                        viber.send_messages(user_id, [TextMessage(text="–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É")])
                    return Response(status=200)

        # --- –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ ---
        if hasattr(message, 'media') and message.media:
            count = user_photo_count.get(user_id, 0)
            limit = custom_limits.get(str(user_id), DAILY_LIMIT)

            if count >= limit:
                viber.send_messages(user_id, [TextMessage(text=f"üö´ –í–∏ –¥–æ—Å—è–≥–ª–∏ –ª—ñ–º—ñ—Ç—É {limit} —Ñ–æ—Ç–æ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ.")])
                return Response(status=200)

            image_url = message.media
            ext = image_url.split('.')[-1].split('?')[0]
            if ext.lower() not in ['jpg', 'jpeg', 'png']:
                ext = 'jpg'

            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            file_base_name = f"photo_{timestamp}"
            file_name = f"{file_base_name}.{ext}"

            try:
                img_data = requests.get(image_url).content
                file_stream = io.BytesIO(img_data)

                media = MediaIoBaseUpload(file_stream, mimetype=f'image/{ext}')
                file_metadata = {'name': file_name, 'parents': [GDRIVE_FOLDER_ID]}
                file = drive_service.files().create(body=file_metadata, media_body=media, fields='id').execute()
                add_public_permission(file.get('id'))

                user_photo_count[user_id] = count + 1
                remaining = limit - user_photo_count[user_id]

                if remaining == 3:
                    viber.send_messages(user_id, [TextMessage(text=f"‚ö†Ô∏è –£ –≤–∞—Å –∑–∞–ª–∏—à–∏–ª–æ—Å—å {remaining} —Ñ–æ—Ç–æ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ.")])

                viber.send_messages(user_id, [TextMessage(text=f"üì• –§–æ—Ç–æ '{file_name}' –æ—Ç—Ä–∏–º–∞–Ω–æ.\n–û–±—Ä–æ–±–ª—é—é. –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è: 2 —Ö–≤")])

                threading.Thread(target=delayed_send_barcodes, args=(user_id, file_base_name, file_name), daemon=True).start()
            except Exception as e:
                viber.send_messages(user_id, [TextMessage(text=f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")])

    return Response(status=200)

@app.route('/', methods=['GET'])
def ping():
    return "OK", 200

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
