import io
import threading
import time
import requests
from flask import Flask, request, Response
from viberbot import Api
from viberbot.api.bot_configuration import BotConfiguration
from viberbot.api.messages.text_message import TextMessage
from viberbot.api.viber_requests import ViberMessageRequest

from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseUpload

# ==== –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ====
VIBER_TOKEN = "4fdbb2493ae7ddc2-cd8869c327e2c592-60fd2dddaa295531"
GDRIVE_FOLDER_ID = "1FteobWxkEUxPq1kBhUiP70a4-X0slbWe"
SPREADSHEET_ID = "1W_fiI8FiwDn0sKq0ks7rGcWhXB0HEcHxar1uK4GL1P8"
GOOGLE_TOKEN_FILE = "token.json"
SCOPES = ['https://www.googleapis.com/auth/drive.file', 'https://www.googleapis.com/auth/spreadsheets.readonly']

app = Flask(__name__)

viber = Api(BotConfiguration(
    name='–§–æ—Ç–æ–ó–∞–≥—Ä—É–∑Bot',
    avatar='https://example.com/avatar.jpg',
    auth_token=VIBER_TOKEN
))

creds = Credentials.from_authorized_user_file(GOOGLE_TOKEN_FILE, SCOPES)
drive_service = build('drive', 'v3', credentials=creds)
sheets_service = build('sheets', 'v4', credentials=creds)


def find_sheet_name(sheet_id, file_base_name):
    try:
        spreadsheet = sheets_service.spreadsheets().get(spreadsheetId=sheet_id).execute()
        sheets = spreadsheet.get('sheets', [])
        for sheet in sheets:
            title = sheet.get('properties', {}).get('title', '')
            if title == file_base_name or title == '[NO_BARCODE] ' + file_base_name:
                return title
        return None
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –ª–∏—Å—Ç–∞: {e}")
        return None


def get_barcodes_from_sheet(sheet_id, sheet_name):
    try:
        result = sheets_service.spreadsheets().values().get(
            spreadsheetId=sheet_id,
            range=f"{sheet_name}!A:A"
        ).execute()
        values = result.get('values', [])
        if not values:
            return None
        # –Ø–∫—â–æ –ª–∏—Å—Ç –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —à—Ç—Ä–∏—Ö–∫–æ–¥—ñ–≤
        if len(values) == 1 and values[0][0] == "–®—Ç—Ä–∏—Ö–∫–æ–¥—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ":
            return None
        barcodes = [row[0] for row in values if row]
        if not barcodes:
            return None
        return "\n".join(barcodes)
    except Exception as e:
        return f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—ñ —à—Ç—Ä–∏—Ö–∫–æ–¥—ñ–≤: {str(e)}"


def delayed_send_barcodes(user_id, file_base_name, file_name, delay=80):
    time.sleep(delay)
    try:
        sheet_name = find_sheet_name(SPREADSHEET_ID, file_base_name)
        if not sheet_name:
            text = f"‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ª–∏—Å—Ç–∞ –∑ –Ω–∞–∑–≤–æ—é '{file_base_name}' –∞–±–æ '[NO_BARCODE] {file_base_name}'. –ú–æ–∂–ª–∏–≤–æ, —Ñ–æ—Ç–æ —â–µ –Ω–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ."
        else:
            barcodes_text = get_barcodes_from_sheet(SPREADSHEET_ID, sheet_name)
            if barcodes_text is None:
                text = f"‚ùå –®—Ç—Ä–∏—Ö–∫–æ–¥—ñ–≤ —É —Ñ–æ—Ç–æ '{file_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
            elif "–ü–æ–º–∏–ª–∫–∞" in barcodes_text:
                text = f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—ñ —à—Ç—Ä–∏—Ö–∫–æ–¥—ñ–≤: {barcodes_text}"
            else:
                text = f"üì∏ –§–æ—Ç–æ: {file_name}\nüîç –®—Ç—Ä–∏—Ö–∫–æ–¥–∏ –∑ –ª–∏—Å—Ç–∞ '{sheet_name}':\n{barcodes_text}"
        viber.send_messages(user_id, [TextMessage(text=text)])
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ —É delayed_send_barcodes: {e}")


@app.route('/', methods=['POST'])
def incoming():
    viber_request = viber.parse_request(request.get_data())

    if isinstance(viber_request, ViberMessageRequest):
        message = viber_request.message
        user_id = viber_request.sender.id

        if hasattr(message, 'media') and message.media:
            image_url = message.media
            ext = image_url.split('.')[-1].split('?')[0]
            if ext.lower() not in ['jpg', 'jpeg', 'png']:
                ext = 'jpg'

            import datetime
            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            file_base_name = f"photo_{timestamp}"
            file_name = f"{file_base_name}.{ext}"

            try:
                img_data = requests.get(image_url).content
                file_stream = io.BytesIO(img_data)

                media = MediaIoBaseUpload(file_stream, mimetype=f'image/{ext}')
                file_metadata = {
                    'name': file_name,
                    'parents': [GDRIVE_FOLDER_ID]
                }
                drive_service.files().create(
                    body=file_metadata,
                    media_body=media,
                    fields='id'
                ).execute()

                viber.send_messages(user_id, [
                    TextMessage(text=f"üì• –§–æ—Ç–æ '{file_name}' –æ—Ç—Ä–∏–º–∞–Ω–æ. –ß–µ–∫–∞—î–º–æ —à—Ç—Ä–∏—Ö–∫–æ–¥–∏...")
                ])

                threading.Thread(
                    target=delayed_send_barcodes,
                    args=(user_id, file_base_name, file_name),
                    daemon=True
                ).start()

            except Exception as e:
                viber.send_messages(user_id, [
                    TextMessage(text=f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")
                ])

    return Response(status=200)


@app.route('/', methods=['GET'])
def ping():
    return "OK", 200


if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
import io
import threading
import time
import requests
from flask import Flask, request, Response
from viberbot import Api
from viberbot.api.bot_configuration import BotConfiguration
from viberbot.api.messages.text_message import TextMessage
from viberbot.api.viber_requests import ViberMessageRequest

from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseUpload

# ==== –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ====
VIBER_TOKEN = "4fdbb2493ae7ddc2-cd8869c327e2c592-60fd2dddaa295531"
GDRIVE_FOLDER_ID = "1FteobWxkEUxPq1kBhUiP70a4-X0slbWe"
SPREADSHEET_ID = "1W_fiI8FiwDn0sKq0ks7rGcWhXB0HEcHxar1uK4GL1P8"
GOOGLE_TOKEN_FILE = "token.json"
SCOPES = ['https://www.googleapis.com/auth/drive.file', 'https://www.googleapis.com/auth/spreadsheets.readonly']

app = Flask(__name__)

# ==== –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Viber –±–æ—Ç–∞ ====
viber = Api(BotConfiguration(
    name='–§–æ—Ç–æ–ó–∞–≥—Ä—É–∑Bot',
    avatar='https://example.com/avatar.jpg',
    auth_token=VIBER_TOKEN
))

# ==== –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Google API –∫–ª—ñ—î–Ω—Ç—ñ–≤ ====
creds = Credentials.from_authorized_user_file(GOOGLE_TOKEN_FILE, SCOPES)
drive_service = build('drive', 'v3', credentials=creds)
sheets_service = build('sheets', 'v4', credentials=creds)


def find_sheet_name(sheet_id, file_base_name):
    """–®—É–∫–∞—î –ª–∏—Å—Ç, –Ω–∞–∑–≤–∞ —è–∫–æ–≥–æ —Ç–æ—á–Ω–æ —Å–ø—ñ–≤–ø–∞–¥–∞—î –∑ file_base_name."""
    try:
        spreadsheet = sheets_service.spreadsheets().get(spreadsheetId=sheet_id).execute()
        sheets = spreadsheet.get('sheets', [])
        for sheet in sheets:
            title = sheet.get('properties', {}).get('title', '')
            if title == file_base_name:
                return title
        return None
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –ª–∏—Å—Ç–∞: {e}")
        return None


def get_barcodes_from_sheet(sheet_id, sheet_name):
    try:
        result = sheets_service.spreadsheets().values().get(
            spreadsheetId=sheet_id,
            range=f"{sheet_name}!A:A"
        ).execute()
        values = result.get('values', [])
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–∑–Ω–∞—á–∫–∏ [NO_BARCODE]
        if not values or (len(values) == 1 and values[0][0] == "[NO_BARCODE]"):
            return None  # –ü–æ–∑–Ω–∞—á–∞—î–º–æ, —â–æ —à—Ç—Ä–∏—Ö–∫–æ–¥—ñ–≤ –Ω–µ–º–∞—î
        barcodes = [row[0] for row in values if row]
        return "\n".join(barcodes)
    except Exception as e:
        return f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—ñ —à—Ç—Ä–∏—Ö–∫–æ–¥—ñ–≤: {str(e)}"


def delayed_send_barcodes(user_id, file_base_name, file_name, delay=80):
    time.sleep(delay)  # –ß–µ–∫–∞—î–º–æ ~1 —Ö–≤ 20 —Å–µ–∫
    sheet_name = find_sheet_name(SPREADSHEET_ID, file_base_name)
    if not sheet_name:
        text = f"‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ª–∏—Å—Ç–∞ –∑ –Ω–∞–∑–≤–æ—é '{file_base_name}'"
    else:
        barcodes_text = get_barcodes_from_sheet(SPREADSHEET_ID, sheet_name)
        if barcodes_text is None:
            text = f"‚ùå –®—Ç—Ä–∏—Ö–∫–æ–¥—ñ–≤ —É —Ñ–æ—Ç–æ '{file_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
        else:
            text = f"üì∏ –§–æ—Ç–æ: {file_name}\nüîç –®—Ç—Ä–∏—Ö–∫–æ–¥–∏ –∑ –ª–∏—Å—Ç–∞ '{sheet_name}':\n{barcodes_text}"
    try:
        viber.send_messages(user_id, [
            TextMessage(text=text)
        ])
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ —à—Ç—Ä–∏—Ö–∫–æ–¥—ñ–≤: {e}")


@app.route('/', methods=['POST'])
def incoming():
    viber_request = viber.parse_request(request.get_data())

    if isinstance(viber_request, ViberMessageRequest):
        message = viber_request.message
        user_id = viber_request.sender.id

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –º–µ–¥—ñ–∞ (–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è)
        if hasattr(message, 'media') and message.media:
            image_url = message.media
            ext = image_url.split('.')[-1].split('?')[0]
            if ext.lower() not in ['jpg', 'jpeg', 'png']:
                ext = 'jpg'

            import datetime
            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            file_base_name = f"photo_{timestamp}"
            file_name = f"{file_base_name}.{ext}"

            try:
                # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–æ—Ç–æ –∑ URL
                img_data = requests.get(image_url).content
                file_stream = io.BytesIO(img_data)

                # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–∞ Google Drive
                media = MediaIoBaseUpload(file_stream, mimetype=f'image/{ext}')
                file_metadata = {
                    'name': file_name,
                    'parents': [GDRIVE_FOLDER_ID]
                }
                drive_service.files().create(
                    body=file_metadata,
                    media_body=media,
                    fields='id'
                ).execute()

                # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
                viber.send_messages(user_id, [
                    TextMessage(text=f"üì• –§–æ—Ç–æ '{file_name}' –æ—Ç—Ä–∏–º–∞–Ω–æ. –ß–µ–∫–∞—î–º–æ —à—Ç—Ä–∏—Ö–∫–æ–¥–∏...")
                ])

                # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ñ–æ–Ω–æ–≤–∏–π –ø–æ—Ç—ñ–∫, —è–∫–∏–π —á–µ—Ä–µ–∑ delay –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç—å —à—Ç—Ä–∏—Ö–∫–æ–¥–∏
                threading.Thread(
                    target=delayed_send_barcodes,
                    args=(user_id, file_base_name, file_name),
                    daemon=True
                ).start()

            except Exception as e:
                viber.send_messages(user_id, [
                    TextMessage(text=f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")
                ])

    return Response(status=200)


@app.route('/', methods=['GET'])
def ping():
    return "OK", 200


if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
